---
const { images = [], ariaLabel = "Galería de fotos", autoAdvanceMs = 6000 } = Astro.props as {
  images?: string[];
  ariaLabel?: string;
  autoAdvanceMs?: number;
};

const rawInterval = Number(autoAdvanceMs ?? 0);
const sanitizedInterval = Number.isFinite(rawInterval) && rawInterval > 0 ? rawInterval : 0;
const hasImages = Array.isArray(images) && images.length > 0;
---
{hasImages ? (
  <div class="carousel" data-carousel data-auto-advance={sanitizedInterval.toString()}
    aria-label={ariaLabel}
  >
    <div class="carousel-track">
      {images.map((src, index) => (
        <figure class={`carousel-slide${index === 0 ? " is-active" : ""}`} data-index={index}>
          <img
            src={src}
            alt={`${ariaLabel} ${index + 1}`}
            loading={index === 0 ? "eager" : "lazy"}
            decoding="async"
          />
        </figure>
      ))}
    </div>
    <div class="carousel-controls">
      <button class="carousel-button prev" type="button" aria-label="Imagen anterior">
        ‹
      </button>
      <button class="carousel-button next" type="button" aria-label="Imagen siguiente">
        ›
      </button>
    </div>
    <div class="carousel-dots" role="tablist">
      {images.map((_, index) => (
        <button
          class={`carousel-dot${index === 0 ? " is-active" : ""}`}
          type="button"
          role="tab"
          aria-label={`Mostrar imagen ${index + 1}`}
          data-index={index}
        />
      ))}
    </div>
  </div>
) : (
  <div class="carousel-empty" role="note">
    Agrega imágenes en <code>public/gallery</code> para activar esta galería.
  </div>
)}

<style>
  .carousel {
    position: relative;
    display: flex;
    flex-direction: column;
    gap: 1rem;
    width: 100%;
    isolation: isolate;
  }

  .carousel-track {
    position: relative;
    width: 100%;
    padding-top: 100%;
    border-radius: 24px;
    overflow: hidden;
    background: var(--surface-muted, #101820);
    box-shadow: 0 24px 40px rgba(15, 23, 42, 0.32);
  }

  .carousel-slide {
    position: absolute;
    inset: 0;
    margin: 0;
    opacity: 0;
    transition: opacity 360ms ease-in-out;
  }

  .carousel-slide.is-active {
    opacity: 1;
  }

  .carousel-slide img {
    display: block;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .carousel-controls {
    position: absolute;
    top: 50%;
    left: 0;
    right: 0;
    display: flex;
    justify-content: space-between;
    transform: translateY(-50%);
    pointer-events: none;
  }

  .carousel-button {
    pointer-events: auto;
    background: rgba(15, 23, 42, 0.72);
    border: none;
    color: #fff;
    width: 2.5rem;
    height: 2.5rem;
    border-radius: 999px;
    display: grid;
    place-items: center;
    font-size: 1.75rem;
    line-height: 1;
    cursor: pointer;
    transition: background 180ms ease-in-out;
  }

  .carousel-button:hover,
  .carousel-button:focus-visible {
    background: rgba(59, 130, 246, 0.9);
    outline: none;
  }

  .carousel-dots {
    display: flex;
    justify-content: center;
    gap: 0.5rem;
  }

  .carousel-dot {
    width: 0.75rem;
    height: 0.75rem;
    border-radius: 50%;
    border: none;
    background: rgba(148, 163, 184, 0.4);
    cursor: pointer;
    transition: transform 180ms ease, background 180ms ease;
  }

  .carousel-dot.is-active {
    background: #38bdf8;
    transform: scale(1.1);
  }

  .carousel-empty {
    padding: 1.5rem;
    border-radius: 1rem;
    border: 1px dashed rgba(148, 163, 184, 0.3);
    background: rgba(15, 23, 42, 0.4);
    text-align: center;
    font-size: 0.95rem;
    color: rgba(226, 232, 240, 0.9);
  }

  .carousel-empty code {
    font-family: var(--font-mono, "JetBrains Mono", monospace);
  }

  @media (min-width: 768px) {
    .carousel-track {
      padding-top: 120%;
    }
  }
</style>

<script is:inline>
  const carousels = Array.from(document.querySelectorAll('[data-carousel]'));

  const autoAdvance = (carousel, advance, interval) => {
    if (!interval) return undefined;
    return window.setInterval(() => advance(1), interval);
  };

  carousels.forEach((carousel) => {
    const slides = Array.from(carousel.querySelectorAll('.carousel-slide'));
    if (slides.length === 0) return;

    const dots = Array.from(carousel.querySelectorAll('.carousel-dot'));
    const prevBtn = carousel.querySelector('.carousel-button.prev');
    const nextBtn = carousel.querySelector('.carousel-button.next');
    let index = 0;
    let timer;

    const setActive = (nextIndex) => {
      index = (nextIndex + slides.length) % slides.length;
      slides.forEach((slide, i) => {
        slide.classList.toggle('is-active', i === index);
      });
      dots.forEach((dot, i) => {
        dot.classList.toggle('is-active', i === index);
      });
    };

    const step = (delta) => {
      setActive(index + delta);
    };

    const intervalAttr = Number.parseInt(carousel.dataset.autoAdvance ?? '', 10);
    const interval = Number.isFinite(intervalAttr) && intervalAttr > 0 ? intervalAttr : 0;

    const resetTimer = () => {
      if (timer) window.clearInterval(timer);
      timer = autoAdvance(carousel, step, interval);
    };

    prevBtn?.addEventListener('click', () => {
      step(-1);
      resetTimer();
    });

    nextBtn?.addEventListener('click', () => {
      step(1);
      resetTimer();
    });

    dots.forEach((dot, dotIndex) => {
      dot.addEventListener('click', () => {
        setActive(dotIndex);
        resetTimer();
      });
    });

    carousel.addEventListener('mouseenter', () => {
      if (timer) window.clearInterval(timer);
    });

    carousel.addEventListener('mouseleave', () => {
      resetTimer();
    });

    setActive(0);
    resetTimer();
  });
</script>
