---
export interface Photo {
  src: string;
  alt: string;
}

interface Props {
  heading: string;
  intro?: string;
  photos: Photo[];
  lang?: "es" | "en";
}

const { heading, intro, photos, lang = "es" } = Astro.props;
const previousLabel = lang === "en" ? "Previous" : "Anterior";
const nextLabel = lang === "en" ? "Next" : "Siguiente";
---
<section class="photo-carousel" data-carousel>
  <div class="photo-carousel__header">
    <h2 class="h2">{heading}</h2>
    {intro && <p class="carousel-intro">{intro}</p>}
  </div>
  <div class="carousel-track" role="list">
    {photos.map((photo) => (
      <figure class="carousel-item" role="listitem">
        <img src={photo.src} alt={photo.alt} loading="lazy" />
      </figure>
    ))}
  </div>
  <div class="carousel-controls">
    <button class="carousel-button prev" type="button" aria-label={previousLabel}>
      <span aria-hidden="true">‹</span>
    </button>
    <button class="carousel-button next" type="button" aria-label={nextLabel}>
      <span aria-hidden="true">›</span>
    </button>
  </div>
</section>

<style>
  .photo-carousel {
    margin: var(--space-3xl) auto;
    display: grid;
    gap: var(--space-lg);
  }

  .photo-carousel__header {
    display: grid;
    gap: var(--space-sm);
  }

  .carousel-intro {
    color: var(--color-gray-400);
    max-width: 56ch;
  }

  .carousel-track {
    display: grid;
    grid-auto-flow: column;
    grid-auto-columns: minmax(260px, 1fr);
    gap: var(--space-md);
    overflow-x: auto;
    scroll-snap-type: x mandatory;
    padding-bottom: var(--space-sm);
  }

  .carousel-track::-webkit-scrollbar {
    height: 8px;
  }

  .carousel-track::-webkit-scrollbar-thumb {
    background: var(--color-gray-700);
    border-radius: 999px;
  }

  .carousel-item {
    margin: 0;
    scroll-snap-align: start;
    position: relative;
    border-radius: var(--radius-lg);
    overflow: hidden;
    box-shadow: var(--shadow-lg);
    background: var(--color-gray-900);
  }

  .carousel-item img {
    display: block;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .carousel-controls {
    display: flex;
    justify-content: flex-end;
    gap: var(--space-sm);
  }

  .carousel-button {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 44px;
    height: 44px;
    border-radius: 999px;
    border: 1px solid var(--color-gray-700);
    background: var(--color-gray-900);
    color: var(--color-gray-100);
    font-size: 1.5rem;
    transition: background 0.2s ease, transform 0.2s ease;
    cursor: pointer;
  }

  .carousel-button:hover,
  .carousel-button:focus-visible {
    background: var(--color-primary-500);
    border-color: var(--color-primary-500);
    transform: translateY(-1px);
  }

  @media (max-width: 768px) {
    .carousel-track {
      grid-auto-columns: minmax(220px, 85%);
    }

    .carousel-controls {
      justify-content: center;
    }
  }
</style>

<script is:inline>
  const setupCarousel = (carousel) => {
    const track = carousel.querySelector(".carousel-track");
    const prev = carousel.querySelector(".carousel-button.prev");
    const next = carousel.querySelector(".carousel-button.next");
    const scrollAmount = track.clientWidth * 0.8;

    const scrollBy = (direction) => {
      track.scrollBy({ left: direction * scrollAmount, behavior: "smooth" });
    };

    prev?.addEventListener("click", () => scrollBy(-1));
    next?.addEventListener("click", () => scrollBy(1));
  };

  const carousels = document.querySelectorAll("[data-carousel]");
  carousels.forEach(setupCarousel);
</script>
