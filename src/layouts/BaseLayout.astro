---
import "../styles/global.css";
import { galleryImages } from "../data/gallery";

const {
  title = "Jean Cruz — Data Analyst",
  description = "Análisis de datos, BI y automatización orientados a impacto de negocio.",
  lang = "es",
  canonicalUrl,
  alternateLocales = [],
  navItems = [],
  primaryCtaHref = "#contact",
  primaryCtaLabel
} = Astro.props as {
  title?: string;
  description?: string;
  lang?: string;
  canonicalUrl?: string;
  alternateLocales?: { lang: string; href: string }[];
  navItems?: { href: string; label: string; isCta?: boolean }[];
  primaryCtaHref?: string;
  primaryCtaLabel?: string;
};

const siteUrl = "https://jeancruzc.github.io";
const fallbackOgImage = `${siteUrl}/blue.png`;
const ogImage = galleryImages.length > 0 ? `${siteUrl}${galleryImages[0]}` : fallbackOgImage;
const resolvedCanonical = canonicalUrl ?? siteUrl;
const resolvedPrimaryCtaLabel = primaryCtaLabel ?? (lang === "en" ? "Contact" : "Contactar");
---
<html lang={lang}>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>{title}</title>
    <meta name="description" content={description} />
    <meta name="robots" content="index, follow" />
    <meta name="author" content="Jean Cruz" />
    <meta name="keywords" content="jean marco, jean marco cruz, jeanmarco, jeanmarcocruz, jean cruz, analista datos, analista peru, analista Lima, business intelligence peru, BI peru, administrador datos, data analyst peru, power bi peru, sql peru, python peru, automatizacion peru, dashboards peru, analista BI Lima, workforce management peru, customer experience analyst, data science peru, business analyst peru, reporting analyst peru, jean marco analista, jeanmarco datos, jean cruz BI" />
    <link rel="icon" type="image/png" href="/icons/Logo.png?v=7" />
    <link rel="apple-touch-icon" href="/icons/Logo.png?v=7" />
    <link rel="shortcut icon" href="/icons/Logo.png?v=7" />
    <meta name="theme-color" content="#0B1221" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;500;700&display=swap" rel="stylesheet" />
    <link rel="stylesheet" href="https://unpkg.com/aos@2.3.1/dist/aos.css" />
    <link rel="canonical" href={resolvedCanonical} />
    <link rel="alternate" hreflang="x-default" href={resolvedCanonical} />
    {alternateLocales.map((alt) => (
      <link rel="alternate" hreflang={alt.lang} href={alt.href} />
    ))}
    <meta property="og:type" content="website" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={resolvedCanonical} />
    <meta property="og:image" content={ogImage} />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={ogImage} />
    <script defer data-domain="jeancruzc.github.io" src="https://plausible.io/js/script.js"></script>
    <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "Person",
      "name": "Jean Marco Cruz",
      "alternateName": ["Jean Cruz", "Jean Marco", "JeanMarco", "JeanMarcoCruz"],
      "jobTitle": "Data Analyst & Business Intelligence Specialist",
      "description": "Analista de datos especializado en WFM, BI y automatización en Lima, Perú",
      "url": "https://jeancruzc.github.io",
      "email": "jean@cruzanalytics.com",
      "address": {
        "@type": "PostalAddress",
        "addressLocality": "Lima",
        "addressCountry": "PE"
      },
      "worksFor": {
        "@type": "Organization",
        "name": "Freelance Data Analyst"
      },
      "knowsAbout": [
        "Data Analysis",
        "Business Intelligence",
        "Power BI",
        "Python",
        "SQL",
        "Workforce Management",
        "Customer Experience Analytics"
      ],
      "sameAs": [
        "https://www.linkedin.com/in/jeancruzc",
        "https://github.com/JeanCruzC"
      ]
    }
    </script>
    <script is:inline>
      (() => {
        const storageKey = 'theme-preference';
        const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
        const applyTheme = (value) => {
          const theme = value === 'dark' ? 'dark' : 'light';
          const root = document.documentElement;
          root.dataset.theme = theme;
          root.classList.toggle('dark', theme === 'dark');
          root.style.colorScheme = theme;
        };
        const getPreference = () => {
          try {
            const stored = localStorage.getItem(storageKey);
            if (stored === 'light' || stored === 'dark') {
              return stored;
            }
          } catch (error) {
            /* storage unavailable */
          }
          return mediaQuery.matches ? 'dark' : 'light';
        };
        applyTheme(getPreference());
        const onSystemChange = (event) => {
          try {
            if (localStorage.getItem(storageKey)) {
              return;
            }
          } catch (error) {
            /* storage unavailable */
          }
          applyTheme(event.matches ? 'dark' : 'light');
        };
        if (mediaQuery.addEventListener) {
          mediaQuery.addEventListener('change', onSystemChange);
        } else if (mediaQuery.addListener) {
          mediaQuery.addListener(onSystemChange);
        }
      })();
    </script>
  </head>
  <body>
    <header class="nav" data-nav>
      <a class="brand" href={lang === "en" ? "/en/" : "/"}>Jean Cruz</a>
      <button class="nav-toggle" type="button" aria-label="Toggle navigation" aria-expanded="false" aria-controls="nav-menu">
        <span></span>
        <span></span>
        <span></span>
      </button>
      <nav id="nav-menu" class="nav-links">
        {navItems.map((item) => (
          <a
            class={item.isCta ? "cta" : ""}
            href={item.href}
            data-analytics-event={item.isCta ? "Nav Contact CTA" : undefined}
          >
            {item.label}
          </a>
        ))}
        {alternateLocales.length > 0 && (
          <div class="nav-locales" role="group" aria-label="Cambiar idioma">
            <span>{lang === "en" ? "EN" : "ES"}</span>
            {alternateLocales.map((alt) => (
              <a href={alt.href} hreflang={alt.lang}>{alt.lang.toUpperCase()}</a>
            ))}
          </div>
        )}
      </nav>
      <div class="nav-actions">
        <button
          class="theme-toggle"
          type="button"
          data-theme-toggle
          aria-label={lang === "en" ? "Toggle light or dark theme" : "Cambiar entre modo claro u oscuro"}
          aria-pressed="false"
        >
          <span aria-hidden="true" data-theme-icon>☀️</span>
        </button>
        <a class="nav-primary" href={primaryCtaHref} data-analytics-event="Nav Primary CTA">{resolvedPrimaryCtaLabel}</a>
      </div>
    </header>

    <main><slot /></main>

    <footer class="footer">
      <div class="footer-brand">
        <img src="/icons/General.png" alt="CCI Analytics" class="footer-logo" />
        <p>© {new Date().getFullYear()} Jean Marco Cruz (Jean Cruz) — Analista de Datos | Especialista en Business Intelligence | Lima & Remoto</p>
      </div>
      <div class="social">
        <a href="mailto:jeanmarcocruz@ccianalytics.net" aria-label="Email">Email</a>
        <a href="https://www.linkedin.com/in/jeancruzc" target="_blank" rel="noopener">LinkedIn</a>
        <a href="https://github.com/JeanCruzC" target="_blank" rel="noopener">GitHub</a>
      </div>
    </footer>

    <script src="https://unpkg.com/aos@2.3.1/dist/aos.js" defer></script>
    <script is:inline>
      // Animated counters
      function animateCounters() {
        const counters = document.querySelectorAll('.metric-number');
        const observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              const counter = entry.target;
              const target = parseInt(counter.getAttribute('data-target'));
              let current = 0;
              const increment = target / 30;
              const timer = setInterval(() => {
                current += increment;
                if (current >= target) {
                  counter.textContent = target + '+';
                  clearInterval(timer);
                } else {
                  counter.textContent = Math.floor(current);
                }
              }, 50);
              observer.unobserve(counter);
            }
          });
        });
        counters.forEach(counter => observer.observe(counter));
      }
    </script>
    <script is:inline>
      document.addEventListener('DOMContentLoaded', () => {
        const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)');
        if (prefersReducedMotion.matches) {
          document.documentElement.style.setProperty('scroll-behavior', 'auto');
          document.querySelectorAll('[data-aos]').forEach((el) => {
            el.removeAttribute('data-aos');
          });
        } else if (window.AOS) {
          window.AOS.init({ 
            once: true, 
            duration: 600,
            easing: 'ease-out-cubic',
            offset: 50,
            delay: 100
          });
        }
        
        // Initialize animated counters
        animateCounters();

        const nav = document.querySelector('[data-nav]');
        const toggle = nav?.querySelector('.nav-toggle');
        const menu = nav?.querySelector('.nav-links');

        const closeMenu = () => {
          if (!toggle || !menu) return;
          toggle.setAttribute('aria-expanded', 'false');
          menu.classList.remove('is-open');
        };

        toggle?.addEventListener('click', () => {
          if (!menu || !toggle) return;
          const isOpen = toggle.getAttribute('aria-expanded') === 'true';
          toggle.setAttribute('aria-expanded', String(!isOpen));
          menu.classList.toggle('is-open', !isOpen);
        });

        menu?.querySelectorAll('a').forEach((link) => {
          link.addEventListener('click', () => {
            if (window.innerWidth < 900) {
              closeMenu();
            }
          });
        });

        const handleResize = () => {
          if (!menu || !toggle) return;
          if (window.innerWidth >= 900) {
            menu.classList.remove('is-open');
            toggle.setAttribute('aria-expanded', 'false');
          }
        };

        window.addEventListener('resize', handleResize);

        const themeToggle = nav?.querySelector('[data-theme-toggle]');
        const themeIcon = themeToggle?.querySelector('[data-theme-icon]');
        const themeStorageKey = 'theme-preference';
        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)');

        const applyTheme = (value) => {
          const theme = value === 'dark' ? 'dark' : 'light';
          const root = document.documentElement;
          root.dataset.theme = theme;
          root.classList.toggle('dark', theme === 'dark');
          root.style.colorScheme = theme;
          if (themeIcon) {
            themeIcon.textContent = theme === 'dark' ? '🌙' : '☀️';
          }
          if (themeToggle) {
            themeToggle.setAttribute('aria-pressed', theme === 'dark' ? 'true' : 'false');
          }
        };

        const getStoredTheme = () => {
          try {
            const stored = localStorage.getItem(themeStorageKey);
            if (stored === 'light' || stored === 'dark') {
              return stored;
            }
          } catch (error) {
            return null;
          }
          return null;
        };

        const syncTheme = () => {
          const stored = getStoredTheme();
          if (stored) {
            applyTheme(stored);
          } else {
            applyTheme(prefersDark.matches ? 'dark' : 'light');
          }
        };

        syncTheme();

        themeToggle?.addEventListener('click', () => {
          const current = document.documentElement.dataset.theme === 'dark' ? 'dark' : 'light';
          const next = current === 'dark' ? 'light' : 'dark';
          try {
            localStorage.setItem(themeStorageKey, next);
          } catch (error) {
            /* storage unavailable */
          }
          applyTheme(next);
        });

        const handleSystemChange = (event) => {
          const stored = getStoredTheme();
          if (stored) {
            return;
          }
          applyTheme(event.matches ? 'dark' : 'light');
        };

        if (prefersDark.addEventListener) {
          prefersDark.addEventListener('change', handleSystemChange);
        } else if (prefersDark.addListener) {
          prefersDark.addListener(handleSystemChange);
        }

        const trackables = document.querySelectorAll('[data-analytics-event]');
        trackables.forEach((el) => {
          el.addEventListener('click', () => {
            const eventName = el.getAttribute('data-analytics-event');
            if (!eventName) return;
            if (window.plausible) {
              window.plausible(eventName);
            }
          });
        });
      });
    </script>
  </body>
</html>
