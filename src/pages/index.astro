---
import BaseLayout from "../layouts/BaseLayout.astro";
import ProjectGrid from "../components/ProjectGrid.astro";
import ContactForm from "../components/ContactForm.astro";
import ReportShowcase from "../components/ReportShowcase.astro";
import PhotoCarousel from "../components/PhotoCarousel.astro";
import { projectsEs } from "../data/projects";
import { reportsEs } from "../data/reports";
import { galleryImages } from "../data/gallery";

const cvUrl = "/cv/JeanCruz_CV.pdf";
const siteUrl = "https://jeancruzc.github.io";
---
<BaseLayout
  title="Jean Cruz — WFM & BI Lead"
  description="Orquesto datos de WFM y BI para convertir cobertura y demanda en decisiones operativas."
  lang="es"
  canonicalUrl={`${siteUrl}/`}
  alternateLocales={[{ lang: "en", href: `${siteUrl}/en/` }]}
  navItems={[
    { href: "#sobre-mi", label: "Sobre mí" },
    { href: "#habilidades", label: "Habilidades" },
    { href: "#proyectos", label: "Proyectos" },
    { href: "#cv", label: "CV" },
    { href: "#contacto", label: "Contacto", isCta: true }
  ]}
  primaryCtaHref="#contacto"
  primaryCtaLabel="Contactar"
>
  <section class="hero" data-aos="fade-up">
    <div class="hero-grid">
      <div class="hero-copy">
        <div class="hero-brand">
          <span class="brand-pill">Jean Cruz</span>
          <span class="hero-role">Analista de datos — Lima · Remoto</span>
        </div>
        <h1>Transformo datos en decisiones claras.</h1>
        <p class="hero-sub">
          Analista de datos con enfoque en CX y WFM. Diseño tableros ejecutivos y procesos de pronóstico,
          integrando Python / SQL / Power BI / Looker Studio para responder preguntas del negocio y priorizar
          acciones.
        </p>
        <ul class="hero-bullets">
          <li><strong>Pronóstico por intervalo</strong> y planificación de capacidad para operaciones multicanal.</li>
          <li><strong>Tableros ejecutivos</strong> con alertas simples y seguimiento periódico.</li>
          <li><strong>Automatización</strong> de reportes y flujos de datos para ahorrar tiempo operativo.</li>
        </ul>
        <div class="hero-actions">
          <a class="cta hero-primary" href="#contacto" data-analytics-event="Hero Contact CTA">Contactar</a>
          <a
            class="hero-secondary"
            href={cvUrl}
            target="_blank"
            rel="noopener"
            data-analytics-event="Hero Download CV"
            data-cv-anchor
          >
            Ver / Descargar CV
          </a>
        </div>
      </div>
      <div class="hero-media">
        <PhotoCarousel images={galleryImages} ariaLabel="Galería personal de Jean Cruz" />
      </div>
    </div>
  </section>

  <ReportShowcase
    reports={reportsEs}
    heading="Dashboards accionables"
    intro="Colección de reportes que activan cobertura por intervalo, alertas proactivas y productividad por canal."
    lang="es"
  />

  <section id="sobre-mi" class="section" data-aos="fade-up">
    <h2 class="h2">Sobre mí</h2>
    <div class="about-content card">
      <p>
        Analista de datos orientado a negocio. Conecto pronóstico, tableros y automatización para que operaciones
        tomen decisiones rápidas.
      </p>
      <p>
        Trabajo con equipos de CX/WFM y áreas administrativas para alinear capacidad, demanda y seguimiento.
      </p>
      <ul>
        <li>Integro Python/SQL/Power BI con fuentes internas en un flujo reproducible.</li>
        <li>Diseño tableros simples con prioridades claras y reuniones de seguimiento.</li>
      </ul>
    </div>
  </section>

  <section id="habilidades" class="section" data-aos="fade-up">
    <h2 class="h2">Habilidades</h2>
    <div class="grid grid-3">
      <div class="card">
        <h3>Lenguajes</h3>
        <ul class="pill-list">
          <li>Python</li>
          <li>SQL</li>
          <li>DAX</li>
        </ul>
      </div>
      <div class="card">
        <h3>BI &amp; Datos</h3>
        <ul class="pill-list">
          <li>Power BI</li>
          <li>Looker Studio</li>
          <li>Excel/Sheets</li>
          <li>ETL/Modelado</li>
        </ul>
      </div>
      <div class="card">
        <h3>CX–WFM</h3>
        <ul class="pill-list">
          <li>Planificación de cobertura</li>
          <li>Pronóstico por intervalo</li>
          <li>Automatización con Python/SQL</li>
        </ul>
      </div>
    </div>
  </section>

  <ProjectGrid
    projects={projectsEs}
    heading="Proyectos estrella"
    intro="Casos recientes que conectan pronóstico, tableros y automatización en operaciones CX."
    anchor="proyectos"
  />

  <section id="cv" class="section" data-aos="fade-up">
    <h2 class="h2">Experiencia en resumen</h2>
    <div class="card experience">
      <article>
        <h3>Workforce Lead — Operaciones CX</h3>
        <ul>
          <li>Planificación regional que traduce forecasting en rutas de staffing y presupuesto.</li>
          <li>Gobernanza de tableros ejecutivos y rituales de seguimiento para liderazgo.</li>
        </ul>
      </article>
      <article>
        <h3>Planificador Senior CX — Operaciones Globales</h3>
        <ul>
          <li>Automatización de reportes y tableros diarios con Python/SQL/Power BI.</li>
          <li>Implementación de forecasting walk-forward y tableros de productividad multicanal.</li>
        </ul>
      </article>
      <p class="experience-note">Formación en Comunicación &amp; Publicidad · Certificaciones en Data/BI y WFM.</p>
      <p>
        <a
          href={cvUrl}
          target="_blank"
          rel="noopener"
          data-analytics-event="Experience Download CV"
          data-cv-anchor
        >
          Ver / Descargar CV (PDF)
        </a>
      </p>
    </div>
  </section>

  <section id="gestor-cv" class="section" data-aos="fade-up">
    <h2 class="h2">Gestiona tu CV</h2>
    <div class="card cv-manager" data-cv-card>
      <p class="cv-manager__intro">
        Sube tu CV en PDF para reemplazar el archivo disponible en la página. El documento se guarda de forma local en
        este navegador.
      </p>
      <label class="cv-upload" for="cv-file-input">
        <span>Seleccionar PDF</span>
        <input id="cv-file-input" type="file" accept="application/pdf" />
      </label>
      <div class="cv-current">
        <div class="cv-current__info">
          <span class="cv-filename" data-cv-filename>CV actual: JeanCruz_CV.pdf</span>
          <button
            class="cv-action-button"
            type="button"
            id="cv-action-button"
            aria-haspopup="true"
            aria-expanded="false"
          >
            Ver / Descargar
          </button>
          <div class="cv-action-menu" id="cv-action-menu" hidden>
            <a id="cv-view-link" href={cvUrl} target="_blank" rel="noopener">Ver en nueva pestaña</a>
            <a id="cv-download-link" href={cvUrl} download>Descargar PDF</a>
          </div>
        </div>
        <button id="cv-reset-button" type="button" class="cv-reset">Usar CV predeterminado</button>
      </div>
      <p class="cv-helper">Puedes subir cualquier archivo PDF. Si algo sale mal, vuelve al CV predeterminado.</p>
      <p class="cv-error" id="cv-error" role="alert" hidden></p>
    </div>
  </section>

  <section id="contacto" class="section" data-aos="fade-up">
    <h2 class="h2">Contacto</h2>
    <p class="contact-intro">¿Buscas fortalecer WFM o BI? Agenda una llamada breve.</p>
    <ContactForm lang="es" formspreeId="myznqoqj" trackEvent="Contact Form ES" />
  </section>
</BaseLayout>

<script type="module">
  const DEFAULT_CV = {
    url: "/cv/JeanCruz_CV.pdf",
    name: "JeanCruz_CV.pdf"
  };
  const STORAGE_KEY = "jc-custom-cv";

  const fileInput = document.getElementById("cv-file-input");
  const filenameEl = document.querySelector("[data-cv-filename]");
  const errorEl = document.getElementById("cv-error");
  const resetButton = document.getElementById("cv-reset-button");
  const actionButton = document.getElementById("cv-action-button");
  const actionMenu = document.getElementById("cv-action-menu");
  const viewLink = document.getElementById("cv-view-link");
  const downloadLink = document.getElementById("cv-download-link");
  const pageAnchors = document.querySelectorAll("[data-cv-anchor]");

  const closeMenu = () => {
    if (!actionMenu) return;
    actionMenu.hidden = true;
    actionButton?.setAttribute("aria-expanded", "false");
  };

  const setError = (message) => {
    if (!errorEl) return;
    if (!message) {
      errorEl.hidden = true;
      errorEl.textContent = "";
      return;
    }
    errorEl.hidden = false;
    errorEl.textContent = message;
  };

  const applyCv = (cv) => {
    const safeName = cv.name?.toLowerCase().endsWith(".pdf") ? cv.name : `${cv.name || "cv"}.pdf`;
    if (filenameEl) {
      filenameEl.textContent = `CV actual: ${cv.name}`;
    }
    if (viewLink) {
      viewLink.href = cv.url;
    }
    if (downloadLink) {
      downloadLink.href = cv.url;
      downloadLink.setAttribute("download", safeName);
    }
    pageAnchors.forEach((anchor) => {
      anchor.setAttribute("href", cv.url);
      anchor.setAttribute("download", safeName);
    });
  };

  const loadStoredCv = () => {
    try {
      const raw = localStorage.getItem(STORAGE_KEY);
      if (!raw) return DEFAULT_CV;
      const parsed = JSON.parse(raw);
      if (!parsed || typeof parsed !== "object") return DEFAULT_CV;
      const { name, dataUrl } = parsed;
      if (typeof dataUrl === "string" && dataUrl.startsWith("data:application/pdf")) {
        return {
          url: dataUrl,
          name: typeof name === "string" && name.trim() ? name.trim() : "CV personalizado.pdf"
        };
      }
    } catch (error) {
      console.error("No se pudo leer el CV personalizado", error);
    }
    return DEFAULT_CV;
  };

  const persistCv = (cv) => {
    try {
      if (cv === DEFAULT_CV) {
        localStorage.removeItem(STORAGE_KEY);
        return;
      }
      localStorage.setItem(STORAGE_KEY, JSON.stringify({ name: cv.name, dataUrl: cv.url }));
    } catch (error) {
      console.error("No se pudo guardar el CV personalizado", error);
      setError("No pudimos guardar el archivo de forma local. Verifica el espacio disponible en tu navegador.");
    }
  };

  const handleFile = (file) => {
    if (!file) return;
    if (file.type !== "application/pdf" && !file.name.toLowerCase().endsWith(".pdf")) {
      setError("Selecciona un archivo con formato PDF.");
      return;
    }
    if (file.size > 12 * 1024 * 1024) {
      setError("El archivo es muy pesado. Usa un PDF de hasta 12MB.");
      return;
    }

    setError("");
    const reader = new FileReader();
    reader.onload = (event) => {
      const result = event.target?.result;
      if (typeof result !== "string") {
        setError("No pudimos leer el archivo. Intenta nuevamente.");
        return;
      }
      const customCv = {
        url: result,
        name: file.name
      };
      persistCv(customCv);
      applyCv(customCv);
    };
    reader.onerror = () => {
      setError("Ocurrió un error al leer el PDF. Intenta nuevamente.");
    };
    reader.readAsDataURL(file);
  };

  const init = () => {
    if (!fileInput || !actionButton || !actionMenu) return;
    applyCv(loadStoredCv());

    fileInput.addEventListener("change", (event) => {
      const target = event.target;
      const file = target?.files?.[0];
      handleFile(file);
      target.value = "";
    });

    actionButton.addEventListener("click", () => {
      const isHidden = actionMenu.hidden;
      actionMenu.hidden = !isHidden;
      actionButton.setAttribute("aria-expanded", String(isHidden));
    });

    document.addEventListener("click", (event) => {
      if (!actionMenu || actionMenu.hidden) return;
      if (event.target === actionButton || actionButton.contains(event.target)) return;
      if (actionMenu.contains(event.target)) return;
      closeMenu();
    });

    document.addEventListener("keydown", (event) => {
      if (event.key === "Escape") {
        closeMenu();
      }
    });

    resetButton?.addEventListener("click", () => {
      persistCv(DEFAULT_CV);
      applyCv(DEFAULT_CV);
      setError("");
    });

    actionMenu.addEventListener("click", (event) => {
      const target = event.target;
      if (target instanceof HTMLAnchorElement) {
        closeMenu();
      }
    });
  };

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", init, { once: true });
  } else {
    init();
  }
</script>
